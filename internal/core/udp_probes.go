package core

// ProbeStats tracks the effectiveness of probes for each port.
type ProbeStats struct {
	Sent      int // Number of probes sent
	Responses int // Number of responses received
	Successes int // Number of successful service detections
}

func initUDPProbes() map[uint16][]byte {
	return map[uint16][]byte{
		53:    buildDNSProbe(),                // DNS
		123:   buildNTPProbe(),                // NTP
		161:   buildSNMPProbe(),               // SNMP
		500:   buildIKEProbe(),                // IKE/IPSec
		1194:  {0x38, 0x01, 0x00, 0x00, 0x00}, // OpenVPN
		51820: {0x01, 0x00, 0x00, 0x00},       // WireGuard
		67:    buildDHCPProbe(),               // DHCP
		69:    buildTFTPProbe(),               // TFTP
		137:   buildNetBIOSProbe(),            // NetBIOS Name Service
		5353:  buildMDNSProbe(),               // mDNS
	}
}

func (s *UDPScanner) AddCustomProbe(port uint16, probe []byte) {
	s.customProbes[port] = probe
}

func (s *UDPScanner) GetProbeStats() map[uint16]ProbeStats {
	return s.probeStats
}

func (s *UDPScanner) recordProbeAttempt(port uint16, success bool) {
	stats := s.probeStats[port]
	stats.Sent++
	if success {
		stats.Responses++
		stats.Successes++
	}
	s.probeStats[port] = stats
}

func (s *UDPScanner) getProbeForPort(port uint16) []byte {
	if probe, exists := s.customProbes[port]; exists {
		return probe
	}

	if probe, exists := s.serviceProbes[port]; exists {
		return probe
	}

	return []byte{}
}

// UDP probes

func buildDNSProbe() []byte {
	return []byte{
		0x00, 0x00, // Transaction ID
		0x01, 0x00, // Flags: standard query
		0x00, 0x01, // Questions: 1
		0x00, 0x00, // Answer RRs: 0
		0x00, 0x00, // Authority RRs: 0
		0x00, 0x00, // Additional RRs: 0
		// Query: version.bind
		0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
		0x04, 0x62, 0x69, 0x6e, 0x64,
		0x00,       // Root domain
		0x00, 0x10, // Type: TXT
		0x00, 0x03, // Class: CH (Chaos)
	}
}

func buildNTPProbe() []byte {
	return []byte{
		0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
}

func buildSNMPProbe() []byte {
	return []byte{
		0x30, 0x26, // SEQUENCE
		0x02, 0x01, 0x00, // Version: 1
		0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, // Community: "public"
		0xa0, 0x19, // GetRequest PDU
		0x02, 0x01, 0x00, // Request ID
		0x02, 0x01, 0x00, // Error status
		0x02, 0x01, 0x00, // Error index
		0x30, 0x0e, // Varbind list
		0x30, 0x0c, // Varbind
		0x06, 0x08, 0x2b, 0x06, 0x01, 0x02, 0x01, 0x01, 0x01, 0x00, // OID: sysDescr
		0x05, 0x00, // Value: NULL
	}
}

func buildIKEProbe() []byte {
	return []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01,
		0x10,
		0x02,
		0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x1c,
	}
}

func buildDHCPProbe() []byte {
	probe := make([]byte, 240)
	probe[0] = 0x01 // Boot request
	probe[1] = 0x01 // Ethernet
	probe[2] = 0x06 // Hardware address length
	return probe
}

func buildTFTPProbe() []byte {
	return []byte{0x00, 0x01, 0x74, 0x65, 0x73, 0x74, 0x00, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x00}
}

func buildNetBIOSProbe() []byte {
	return []byte{
		0x00, 0x00,
		0x00, 0x10,
		0x00, 0x01,
		0x00, 0x00,
		0x00, 0x00,
		0x00, 0x00,
		0x20, 0x43, 0x4b, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
		0x41, 0x00,
		0x00, 0x21,
		0x00, 0x01,
	}
}

func buildMDNSProbe() []byte {
	return []byte{
		0x00, 0x00,
		0x00, 0x00,
		0x00, 0x01,
		0x00, 0x00,
		0x00, 0x00,
		0x00, 0x00,
		0x09, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
		0x07, 0x5f, 0x64, 0x6e, 0x73, 0x2d, 0x73, 0x64,
		0x04, 0x5f, 0x75, 0x64, 0x70,
		0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
		0x00,
		0x00, 0x0c,
		0x00, 0x01,
	}
}
