# Pre-commit configuration for portscan (Go)
# Minimal, fast checks mirroring CI without heavy deps.
# Install and enable:
#   brew install pre-commit   # or: pipx install pre-commit
#   pre-commit install
# Run on-demand:
#   pre-commit run --all-files

minimum_pre_commit_version: '3.0.0'

# Run these on commit; you can also run manually in CI if desired.
default_stages: [pre-commit]

# Global excludes (keep fast, skip vendored/generated)
exclude: |
  (^vendor/)|(^dist/)|(^bin/)|(^build/)|(^.git/)|(^\.crush/)|(^coverage\.out$)

repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: check-merge-conflict
      - id: mixed-line-ending
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-added-large-files
        args: ["--maxkb=500"]
      - id: detect-private-key
      - id: no-commit-to-branch
        args: ["--branch", "main"]
  - repo: local
    hooks:
      # 1) Format (shows files that would change; then auto-fixes)
      - id: go-fmt
        name: gofumpt + goimports
        language: system
        types: [go]
        stages: [pre-commit]
        pass_filenames: true
        # Format only the staged Go files for speed.
        entry: bash -c 'export PATH=$PATH:$(go env GOPATH)/bin && gofumpt -w "$@" && goimports -w "$@"'

      # 2) Lint (uses existing .golangci.yml)
      - id: golangci-lint
        name: golangci-lint
        language: system
        pass_filenames: false
        stages: [pre-commit]
        entry: golangci-lint run ./...

      # 3) Build/type-check (fast)
      - id: go-build
        name: go build (type check)
        language: system
        pass_filenames: false
        stages: [pre-commit]
        entry: go build ./...

      # 4) Unit tests (short)
      - id: go-test-short
        name: go test (short)
        language: system
        pass_filenames: false
        stages: [pre-commit]
        entry: go test -short ./...

      # 5) Go module tidy check (ensures go.mod/go.sum are clean)
      - id: go-mod-tidy-check
        name: go mod tidy (clean tree)
        language: system
        pass_filenames: false
        stages: [pre-commit]
        entry: go mod tidy

      # 6) Go generate drift check (optional; skip if not used)
      - id: go-generate-check
        name: go generate (no diff)
        language: system
        pass_filenames: false
        stages: [pre-commit]
        entry: bash -c 'set -e; go generate ./... >/dev/null 2>&1 || true; if ! git diff --quiet; then echo "go generate produced changes. Commit generated files."; git --no-pager diff; exit 1; fi'

      # 7) Pre-push quick tests with race detector
      - id: go-test-pre-push
        name: go test (pre-push, race+short)
        language: system
        stages: [pre-push]
        pass_filenames: false
        entry: bash -c 'go test -race -short ./...'
